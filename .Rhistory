xlab("Games played")+
ylab("Percentage of winnings")
print(deck)
}
a=var_plot()
# Variance depending of the number of iteration
var_plot= function(){
x=c(seq(1000,9000,1000),seq(10000,100000,10000))#,seq(100000,1000000,100000)#,seq(1000000,10000000,1000000))
y=c()
k=1
for (i in x){
game(n_episodes=i,shuffle_every=0,decks=5,res=FALSE)
y[k]=n_win/n_game
k = k+1
print(i)
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_point(color="blue")+
ggtitle("")+
xlab("Games played")+
ylab("Percentage of winnings")
print(deck)
}
a=var_plot()
# Simulate x number of game and output the result of the chosen strategy
game = function(n_episodes,infos = "quiet",method = "Q",shuffle_every=0,decks=1,res = TRUE){
reset_stat()
reset_Qmatrix(decks)
counter<<-0
deck <<- c(rep(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10),4*decks))
deck <<- shuffle(deck)
if (shuffle_every==0){shuffle_every=1e+20}
n_episodes<<-n_episodes
for (i in 1:n_episodes){
#shuffle the deck and reset  the counter
if ((i %% shuffle_every)==0){
deck<<-shuffle(deck)
counter<<-0
if (infos=="loud"){cat(shuffle_every,"parties passed,shuffle the deck \n")}
}
party(infos, method)
count()
}
if (res == TRUE){
cat(round(n_win/n_game,2),"win: ",n_win,"loss: ",n_loss,"game: ",n_game,"draw",n_draw,"\n payoff: ",n_win-n_loss,"\n")
}
else if(method =="C"){
return(table_C())
}
}
# Variance depending of the number of iteration
var_plot= function(){
x=c(seq(1000,9000,1000),seq(10000,100000,10000))#,seq(100000,1000000,100000)#,seq(1000000,10000000,1000000))
y=c()
k=1
for (i in x){
game(n_episodes=i,shuffle_every=0,decks=5,res=FALSE)
y[k]=n_win/n_game
k = k+1
print(i)
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_point(color="blue")+
ggtitle("")+
xlab("Games played")+
ylab("Percentage of winnings")
print(deck)
}
a=var_plot()
a
a
setwd("C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Card_counting")
# Variance depending of the number of iteration
var_plot= function(){
x=c(seq(1000,9000,1000),seq(10000,100000,10000))#,seq(100000,1000000,100000)#,seq(1000000,10000000,1000000))
y=c()
k=1
for (i in x){
game(n_episodes=i,shuffle_every=0,decks=1,res=FALSE)
y[k]=n_win/n_game
k = k+1
print(i)
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_point(color="blue")+
ggtitle("")+
xlab("Games played")+
ylab("Percentage of winnings")
}
a=var_plot()
a
shuffle(deck)
# Simulate x number of game and output the result of the chosen strategy
game = function(n_episodes,infos = "quiet",method = "Q",shuffle_every=0,decks=1,res = TRUE){
reset_stat()
reset_Qmatrix(decks)
counter<<-0
deck <<- c(rep(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10),4*decks))
# deck <<- shuffle(deck)
if (shuffle_every==0){shuffle_every=1e+20}
n_episodes<<-n_episodes
for (i in 1:n_episodes){
#shuffle the deck and reset  the counter
if ((i %% shuffle_every)==0){
deck<<-shuffle(deck)
counter<<-0
if (infos=="loud"){cat(shuffle_every,"parties passed,shuffle the deck \n")}
}
party(infos, method)
count()
}
if (res == TRUE){
cat(round(n_win/n_game,2),"win: ",n_win,"loss: ",n_loss,"game: ",n_game,"draw",n_draw,"\n payoff: ",n_win-n_loss,"\n")
}
else if(method =="C"){
return(table_C())
}
}
# Variance depending of the number of iteration
var_plot= function(){
x=c(seq(1000,9000,1000),seq(10000,100000,10000))#,seq(100000,1000000,100000)#,seq(1000000,10000000,1000000))
y=c()
k=1
for (i in x){
game(n_episodes=i,shuffle_every=0,decks=1,res=FALSE)
y[k]=n_win/n_game
k = k+1
print(i)
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_point(color="blue")+
ggtitle("")+
xlab("Games played")+
ylab("Percentage of winnings")
}
a=var_plot()
a
# Simulate x number of game and output the result of the chosen strategy
game = function(n_episodes,infos = "quiet",method = "Q",shuffle_every=0,decks=1,res = TRUE){
reset_stat()
reset_Qmatrix(decks)
counter<<-0
deck <<- c(rep(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10),4*decks))
deck <<- shuffle(deck)
if (shuffle_every==0){shuffle_every=1e+20}
n_episodes<<-n_episodes
for (i in 1:n_episodes){
#shuffle the deck and reset  the counter
if ((i %% shuffle_every)==0){
deck<<-shuffle(deck)
counter<<-0
if (infos=="loud"){cat(shuffle_every,"parties passed,shuffle the deck \n")}
}
party(infos, method)
count()
}
if (res == TRUE){
cat(round(n_win/n_game,2),"win: ",n_win,"loss: ",n_loss,"game: ",n_game,"draw",n_draw,"\n payoff: ",n_win-n_loss,"\n")
}
else if(method =="C"){
return(table_C())
}
}
# Variance depending of the number of iteration
var_plot= function(){
x=c(seq(1000,9000,1000),seq(10000,300000,10000))#,seq(100000,1000000,100000)#,seq(1000000,10000000,1000000))
y=c()
k=1
for (i in x){
game(n_episodes=i,shuffle_every=0,decks=1,res=FALSE)
y[k]=n_win/n_game
k = k+1
print(i)
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_point(color="blue")+
ggtitle("")+
xlab("Games played")+
ylab("Percentage of winnings")
}
a=var_plot()
a
learning_curves= function(sample = 15){
x=c(seq(1000,3000,1000),10000,15000,25000,50000,100000,500000,1000000,3000000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]), "Shuffle every 3 games"))+
geom_point(aes(y = unlist(y[2,]), "Shuffle every 3 games"))+
geom_line(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[4,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[4,]),"No deck shuffling"))
}
learning_curves()
learning_curves= function(sample = 15){
x=c(seq(1000,3000,1000),10000,15000,25000,50000,100000,500000,1000000,3000000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[4,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[4,]),"No deck shuffling"))
}
learning_curves()
learning_curves= function(sample = 15){
x=c(seq(1000,3000,1000),10000,15000,25000,50000,100000,500000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[4,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[4,]),"No deck shuffling"))
}
learning_curves()
counter
learning_curves= function(sample = 15){
x=c(seq(1000,3000,1000),10000,15000,25000,50000,100000,500000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[4,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[4,]),"No deck shuffling"))
}
learning_curves()
counter
# reinitialize the Action-State matrix
reset_Qmatrix = function(decks){
if (decks==1){limit=12}
if (decks==2){limit=13}
if (decks==3){limit=20}
if (decks==4 || decks==5){limit=20}
if (decks==6){limit=22}
if (decks==7){limit=24}
if (decks==8){limit=26}
if (decks==9){limit=28}
if (decks==10){limit=30}
cnt=seq(-limit,limit)
player_score = seq(2,20)
dealer_score = seq(1,10)
max_cnt<<-max(cnt)
tot_count<<-length(cnt)
#generate all possible state
grid<-expand.grid(cnt,player_score,dealer_score)
S=paste(grid[,1],grid[,2],grid[,3],sep="-")   #construct rownames of Q table
# Set of actions, draw another cards or stick with the cards
A<<-c("D","S")
Q <<- matrix(0,nrow=nrow(grid),ncol=2)
colnames(Q) <<- A
rownames(Q) <<- S
}
learning_curves= function(sample = 15){
x=c(seq(1000,3000,1000),10000,15000,25000,50000,100000,500000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[3,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[4,]),"No deck shuffling"))
}
learning_curves()
learning_curves= function(sample = 15){
x=c(seq(1000,3000,1000),10000,15000,25000,50000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[3,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[3,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[4,]),"No deck shuffling"))
}
learning_curves()
#ggplot curve
dt = data.frame(x = x, y = y[1,])
x=c(seq(1000,3000,1000),10000,15000,25000,50000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
sample=15
x=c(seq(1000,3000,1000),10000,15000,25000,50000)
y=data.frame()
perf= data.frame()
k=1
s=1
for (S in c(1,5,0)){
for (i in x){
for(j in 1:sample){
game(n_episodes=i,shuffle_every=S,decks=1,res=FALSE)
perf[k,j] = n_win/n_game
}
y[s,k] = rowMeans(perf[k,])
k = k+1
print(i)
}
k=1
s=s+1
}
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[3,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[3,]),"No deck shuffling"))
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),colour="Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[3,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[3,]),"No deck shuffling"))
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),="Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[3,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[3,]),"No deck shuffling"))
#ggplot curve
dt = data.frame(x = x, y = y[1,])
ggplot(dt, aes(x , y[1,]))+
ggtitle("Learning curve")+
xlab("Games played")+
ylab("Percentage of winnings")+
geom_line(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_point(aes(y = unlist(y[1,]),"Shuffle every game"))+
geom_line(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_point(aes(y = unlist(y[2,]),"Shuffle every 5 games"))+
geom_line(aes(y = unlist(y[3,]), "No deck shuffling"))+
geom_point(aes(y = unlist(y[3,]),"No deck shuffling"))
setwd("C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Project-Guerin-Truffaut")
setwd("~/Time series analysis/Time_Series_project_guerin")
setwd("~/Time series analysis/time_series_project_guerin")
setwd("~/Time series analysis/time_series_project_guerin")
source('FonctionsSeriesChrono.R') ## to compute rmse of one ahead pred, Holt-Winter,neural network and random forest one ahead prediction
setwd("~/Time series analysis/time_series_project_guerin")
source('FonctionsSeriesChrono.R') ## to compute rmse of one ahead pred, Holt-Winter,neural network and random forest one ahead prediction
setwd("~/Time series analysis/Time_Series_project_guerin")
setwd("~/Time series analysis/Time_Series_project_guerin")
source('FonctionsSeriesChrono.R') ## to compute rmse of one ahead pred, Holt-Winter,neural network and random forest one ahead prediction
source('FonctionsSeriesChrono.R') ## to compute rmse of one ahead pred, Holt-Winter,neural network and random forest one ahead prediction
